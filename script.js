// --- Sabitler ve Veri Yapıları (Global Kapsamda) ---
const MUTLAK_DEGERLENDIRME_ARALIKLARI = { "AA": [90, 100], "BA": [80, 89.99], "BB": [75, 79.99], "CB": [70, 74.99], "CC": [60, 69.99], "DC": [50, 59.99], "DD": [40, 49.99], "FD": [30, 39.99], "FF": [0, 29.99], };
const HARF_NOTU_KATSAYILARI = { "AA": 4.0, "BA": 3.5, "BB": 3.0, "CB": 2.5, "CC": 2.0, "DC": 1.5, "DD": 1.0, "FD": 0.5, "FF": 0.0 };
const MINIMUM_FINAL_NOTU_VARSAYILAN = 45;
const T_SKOR_ARALIKLARI_ORTALAMAYA_GORE = { "0_42.5": { "FF": [-Infinity, 35.99], "FD": [36, 40.99], "DD": [41, 45.99], "DC": [46, 50.99], "CC": [51, 55.99], "CB": [56, 60.99], "BB": [61, 65.99], "BA": [66, 70.99], "AA": [71, Infinity] }, "42.5_47.5": { "FF": [-Infinity, 33.99], "FD": [34, 38.99], "DD": [39, 43.99], "DC": [44, 48.99], "CC": [49, 53.99], "CB": [54, 58.99], "BB": [59, 63.99], "BA": [64, 68.99], "AA": [69, Infinity] }, "47.5_52.5": { "FF": [-Infinity, 31.99], "FD": [32, 36.99], "DD": [37, 41.99], "DC": [42, 46.99], "CC": [47, 51.99], "CB": [52, 56.99], "BB": [57, 61.99], "BA": [62, 66.99], "AA": [67, Infinity] }, "52.5_57.5": { "FF": [-Infinity, 29.99], "FD": [30, 34.99], "DD": [35, 39.99], "DC": [40, 44.99], "CC": [45, 49.99], "CB": [50, 54.99], "BB": [55, 59.99], "BA": [60, 64.99], "AA": [65, Infinity] }, "57.5_62.5": { "FF": [-Infinity, 27.99], "FD": [28, 32.99], "DD": [33, 37.99], "DC": [38, 42.99], "CC": [43, 47.99], "CB": [48, 52.99], "BB": [53, 57.99], "BA": [58, 62.99], "AA": [63, Infinity] }, "62.5_70": { "FF": [-Infinity, 25.99], "FD": [26, 30.99], "DD": [31, 35.99], "DC": [36, 40.99], "CC": [41, 45.99], "CB": [46, 50.99], "BB": [51, 55.99], "BA": [56, 60.99], "AA": [61, Infinity] }, "70_80": { "FF": [-Infinity, 23.99], "FD": [24, 28.99], "DD": [29, 33.99], "DC": [34, 38.99], "CC": [39, 43.99], "CB": [44, 48.99], "BB": [49, 53.99], "BA": [54, 58.99], "AA": [59, Infinity] } };


// --- Yardımcı Fonksiyonlar (Global Kapsamda) ---
function getMutlakDegerlendirmeNotu(hamBasariNotu) { hamBasariNotu = Math.round(hamBasariNotu); for (const grade in MUTLAK_DEGERLENDIRME_ARALIKLARI) { const [minScore, maxScore] = MUTLAK_DEGERLENDIRME_ARALIKLARI[grade]; if (hamBasariNotu >= minScore && hamBasariNotu <= maxScore) return grade; } return "FF"; }
function getBagilDegerlendirmeNotuTskor(tSkoru, sinifOrtalamasi) { let hedefAralikAnahtari = null; const siraliOrtalamaAraliklari = Object.keys(T_SKOR_ARALIKLARI_ORTALAMAYA_GORE).sort((a, b) => parseFloat(a.split('_')[0]) - parseFloat(b.split('_')[0])); for (const key of siraliOrtalamaAraliklari) { const [minOrtStr, maxOrtStr] = key.split('_'); const minOrt = parseFloat(minOrtStr); const maxOrt = parseFloat(maxOrtStr); if (sinifOrtalamasi > minOrt && sinifOrtalamasi <= maxOrt) { hedefAralikAnahtari = key; break; } } if (!hedefAralikAnahtari) { if (sinifOrtalamasi > 0 && sinifOrtalamasi <= 42.5) { hedefAralikAnahtari = "0_42.5"; } else if (sinifOrtalamasi > 70) { hedefAralikAnahtari = "70_80"; console.warn("Ortalama 70 üzeri. 70-80 T-skor aralığı kullanılıyor."); } } if (!hedefAralikAnahtari || !T_SKOR_ARALIKLARI_ORTALAMAYA_GORE[hedefAralikAnahtari]) { console.error("Uygun T-skor aralığı bulunamadı. Sınıf Ortalaması:", sinifOrtalamasi); return null; } const notlar = T_SKOR_ARALIKLARI_ORTALAMAYA_GORE[hedefAralikAnahtari]; for (const not in notlar) { const [minT, maxT] = notlar[not]; if (tSkoru >= minT && (maxT === Infinity ? true : tSkoru <= maxT)) { return not; } } console.error("T-skor için harf notu bulunamadı. T-Skoru:", tSkoru, "Aralık:", hedefAralikAnahtari); return null; }
function karsilastirHarfNotlari(not1, not2) { if (!not1) return not2; if (!not2) return not1; const katsayi1 = HARF_NOTU_KATSAYILARI[not1] !== undefined ? HARF_NOTU_KATSAYILARI[not1] : -1; const katsayi2 = HARF_NOTU_KATSAYILARI[not2] !== undefined ? HARF_NOTU_KATSAYILARI[not2] : -1; return katsayi1 >= katsayi2 ? not1 : not2; }
function getHedefNotIcinMinTskor(hedefNot, sinifOrtalamasi) { let hedefAralikAnahtari = null; const siraliOrtalamaAraliklari = Object.keys(T_SKOR_ARALIKLARI_ORTALAMAYA_GORE).sort((a, b) => parseFloat(a.split('_')[0]) - parseFloat(b.split('_')[0])); for (const key of siraliOrtalamaAraliklari) { const [minOrtStr, maxOrtStr] = key.split('_'); const minOrt = parseFloat(minOrtStr); const maxOrt = parseFloat(maxOrtStr); if (sinifOrtalamasi > minOrt && sinifOrtalamasi <= maxOrt) { hedefAralikAnahtari = key; break; } } if (!hedefAralikAnahtari) { if (sinifOrtalamasi > 0 && sinifOrtalamasi <= 42.5) { hedefAralikAnahtari = "0_42.5"; } else if (sinifOrtalamasi > 70) { hedefAralikAnahtari = "70_80"; console.warn("Ort >= 80 durumu için T-Skor tahmini yapılıyor (70-80 aralığı kullanıldı)."); } else { console.error("Hedef T-skor için uygun ortalama aralığı bulunamadı:", sinifOrtalamasi); return null; } } if (!T_SKOR_ARALIKLARI_ORTALAMAYA_GORE[hedefAralikAnahtari] || !T_SKOR_ARALIKLARI_ORTALAMAYA_GORE[hedefAralikAnahtari][hedefNot]) { console.error("Hedef not için T-skor aralığı bulunamadı:", hedefNot, "Ort. Aralığı:", hedefAralikAnahtari); return null; } const minT = T_SKOR_ARALIKLARI_ORTALAMAYA_GORE[hedefAralikAnahtari][hedefNot][0]; return minT === -Infinity ? null : minT; }
function hataGoster(element, mesaj) { element.innerHTML = `<p class="error-message">${mesaj}</p>`; }
function openTab(evt, tabName) { let i, tabcontent, tabbuttons; tabcontent = document.getElementsByClassName("tab-content"); for (i = 0; i < tabcontent.length; i++) { tabcontent[i].style.display = "none"; tabcontent[i].classList.remove("active"); } tabbuttons = document.getElementsByClassName("tab-button"); for (i = 0; i < tabbuttons.length; i++) { tabbuttons[i].classList.remove("active"); } const currentTab = document.getElementById(tabName); if (currentTab) { currentTab.style.display = "block"; currentTab.classList.add("active"); } if (evt && evt.currentTarget) { evt.currentTarget.classList.add("active"); } }
function toggleInputFields(formType) { const tekOrtalamaRadioId = `tekOrtalama${formType}`; const tekOrtalamaGrupId = `tek-ortalama-grup${formType}`; const detayliGirisGrupId = `detayli-giris-grup${formType}`; const tekOrtalamaRadio = document.getElementById(tekOrtalamaRadioId); const tekOrtalamaGrup = document.getElementById(tekOrtalamaGrupId); const detayliGirisGrup = document.getElementById(detayliGirisGrupId); const tekOrtalamaInput = tekOrtalamaGrup ? tekOrtalamaGrup.querySelector('input[type="number"]') : null; const detayliInputs = detayliGirisGrup ? detayliGirisGrup.querySelectorAll('input[type="number"]') : []; if (tekOrtalamaRadio && tekOrtalamaGrup && detayliGirisGrup) { if (tekOrtalamaRadio.checked) { tekOrtalamaGrup.classList.add('active'); detayliGirisGrup.classList.remove('active'); if (tekOrtalamaInput) tekOrtalamaInput.required = true; detayliInputs.forEach(input => { input.required = false; }); } else { tekOrtalamaGrup.classList.remove('active'); detayliGirisGrup.classList.add('active'); if (tekOrtalamaInput) { tekOrtalamaInput.required = false; } } } else { console.error(`toggleInputFields: Elementler bulunamadı - Form Tipi: ${formType}`); } }


// --- DOM Yüklendiğinde Çalışacak Kodlar ---
document.addEventListener('DOMContentLoaded', () => {

    // HTML Elementlerini Seçme
    const harfNotuFormu = document.getElementById('grade-calculator-form');
    const gerekliNotFormu = document.getElementById('required-grade-form');
    const senaryoFormu = document.getElementById('scenario-form');
    const harfNotuSonucAlani = document.getElementById('grade-result');
    const gerekliNotSonucAlani = document.getElementById('required-result');
    const senaryoTabloAlani = document.getElementById('scenario-table-output');

    // Harf Notu Hesaplama Formu İşleyicisi (Öncekiyle aynı)
    if (harfNotuFormu) { harfNotuFormu.addEventListener('submit', (event) => { event.preventDefault(); harfNotuSonucAlani.innerHTML = "<p>Hesaplanıyor...</p>"; const secilenYontem = harfNotuFormu.querySelector('input[name="hesaplamaYontemiHarf"]:checked').value; const finalNotu = parseFloat(document.getElementById('final-grade').value); const sinifOrtalamasi = parseFloat(document.getElementById('class-avg').value); const sinifStandartSapma = parseFloat(document.getElementById('class-stddev').value); let araSinavKatkisi = 0; let gecerliGiris = true; if (secilenYontem === 'tek') { const araSinavOrtalamasiInput = document.getElementById('midterm-avg'); const araSinavOrtalamasi = parseFloat(araSinavOrtalamasiInput.value); araSinavOrtalamasiInput.required = true; if (isNaN(araSinavOrtalamasi) || araSinavOrtalamasi < 0 || araSinavOrtalamasi > 100) { hataGoster(harfNotuSonucAlani, "Hata: Geçerli bir ara sınav ortalaması girin (0-100)."); gecerliGiris = false; } else { araSinavKatkisi = araSinavOrtalamasi * 0.50; } document.getElementById('vize-notu-harf').required = false; document.getElementById('vize-agirlik-harf').required = false; document.getElementById('odev-notu-harf').required = false; document.getElementById('odev-agirlik-harf').required = false; } else { document.getElementById('midterm-avg').required = false; const vizeNotuInput = document.getElementById('vize-notu-harf'); const vizeAgirlikInput = document.getElementById('vize-agirlik-harf'); const odevNotuInput = document.getElementById('odev-notu-harf'); const odevAgirlikInput = document.getElementById('odev-agirlik-harf'); vizeNotuInput.required = true; vizeAgirlikInput.required = true; odevNotuInput.required = true; odevAgirlikInput.required = true; const vizeNotu = parseFloat(vizeNotuInput.value); const vizeAgirlik = parseFloat(vizeAgirlikInput.value); const odevNotu = parseFloat(odevNotuInput.value); const odevAgirlik = parseFloat(odevAgirlikInput.value); if (isNaN(vizeNotu) || isNaN(vizeAgirlik) || isNaN(odevNotu) || isNaN(odevAgirlik) || vizeNotu < 0 || vizeNotu > 100 || odevNotu < 0 || odevNotu > 100 || vizeAgirlik < 0 || vizeAgirlik > 50 || odevAgirlik < 0 || odevAgirlik > 50) { hataGoster(harfNotuSonucAlani, "Hata: Lütfen detaylı giriş alanlarını (notlar 0-100, ağırlıklar 0-50) doğru şekilde doldurun."); gecerliGiris = false; } else if (Math.abs(vizeAgirlik + odevAgirlik - 50) > 0.01) { hataGoster(harfNotuSonucAlani, "Hata: Detaylı girişteki ağırlıkların toplamı 50 olmalıdır."); gecerliGiris = false; } else { araSinavKatkisi = (vizeNotu * vizeAgirlik / 100) + (odevNotu * odevAgirlik / 100); } } if (isNaN(finalNotu) || isNaN(sinifOrtalamasi) || isNaN(sinifStandartSapma)) { hataGoster(harfNotuSonucAlani, "Hata: Lütfen Final Notu, Sınıf Ortalaması ve Standart Sapma alanlarını sayısal olarak doldurun."); gecerliGiris = false; } if (finalNotu < 0 || finalNotu > 100 || sinifOrtalamasi < 0 || sinifOrtalamasi > 100 || sinifStandartSapma < 0) { hataGoster(harfNotuSonucAlani, "Hata: Final Notu ve ortalama 0-100, standart sapma 0 veya üzeri olmalıdır."); gecerliGiris = false; } if (sinifStandartSapma === 0) { hataGoster(harfNotuSonucAlani, "Hata: Standart sapma 0 olamaz."); gecerliGiris = false; } if (!gecerliGiris) return; let hamBasariNotu = NaN; let harfNotu = null; let anaMesaj = ""; let tSkoru = null; let hesaplamaDetaylari = ""; if (finalNotu < MINIMUM_FINAL_NOTU_VARSAYILAN) { harfNotu = "FF"; if (secilenYontem === 'tek') { hamBasariNotu = (parseFloat(document.getElementById('midterm-avg').value) * 0.50) + (finalNotu * 0.50); } else { hamBasariNotu = araSinavKatkisi + (finalNotu * 0.50); } anaMesaj = `Final notunuz (${finalNotu}) minimum (${MINIMUM_FINAL_NOTU_VARSAYILAN}) sınırının altında olduğu için notunuz FF.`; } else { if (secilenYontem === 'tek') { hamBasariNotu = araSinavKatkisi + (finalNotu * 0.50); } else { hamBasariNotu = araSinavKatkisi + (finalNotu * 0.50); } if (hamBasariNotu <= 15) { harfNotu = "FF"; anaMesaj = `Hesaplanan Ham Başarı Notu (${hamBasariNotu.toFixed(2)}) 15 veya altında olduğu için notunuz FF.`; } else { tSkoru = ((hamBasariNotu - sinifOrtalamasi) / sinifStandartSapma) * 10 + 50; tSkoru = Math.round(tSkoru * 100) / 100; const bagilNot = getBagilDegerlendirmeNotuTskor(tSkoru, sinifOrtalamasi); if (bagilNot === null) { anaMesaj = `Hata: T-Skoru (${tSkoru}) için Bağıl Değerlendirme harf notu aralığı bulunamadı...`; hataGoster(harfNotuSonucAlani, anaMesaj); return; } const mutlakNotKarsiligi = getMutlakDegerlendirmeNotu(hamBasariNotu); harfNotu = karsilastirHarfNotlari(bagilNot, mutlakNotKarsiligi); hesaplamaDetaylari = `Hesaplanan T-Skoru: <strong>${tSkoru}</strong>.<br>`; hesaplamaDetaylari += `T-skoruna göre Bağıl Değerlendirme notu: ${bagilNot}.<br>`; hesaplamaDetaylari += `Ham Başarı Notunun Mutlak Değerlendirme Sistemindeki karşılığı: ${mutlakNotKarsiligi}.`; } } let sonucMesaji = ""; if (anaMesaj) { sonucMesaji += `<p>${anaMesaj}</p><hr>`; } sonucMesaji += `Hesaplanan Ham Başarı Notu: <strong>${hamBasariNotu.toFixed(2)}</strong><br>`; sonucMesaji += `Harf Notu: <strong style="font-size: 1.2em;">${harfNotu}</strong>`; if (hesaplamaDetaylari) { sonucMesaji += `<br><details style="margin-top: 10px; font-size: 0.9em; color: #555;"><summary>Hesaplama Detayları</summary><p style="margin-top: 5px;">${hesaplamaDetaylari}</p></details>`; } if (harfNotu == "DC") { sonucMesaji += "<br><strong>Not:</strong> DC ile geçme durumu dönemlik ağırlıklı genel not ortalamanızın 2.00 ve üzeri olmasına bağlıdır."; } else if (["DD", "FD", "FF"].includes(harfNotu)) { sonucMesaji += `<br><strong>Not:</strong> ${harfNotu} notu başarısız anlamına gelir.`; } harfNotuSonucAlani.innerHTML = sonucMesaji; }); }

    // Gerekli Final Notu Hesaplama Formu İşleyicisi (Öncekiyle aynı)
    if (gerekliNotFormu) { gerekliNotFormu.addEventListener('submit', (event) => { event.preventDefault(); gerekliNotSonucAlani.innerHTML = "<p>Hesaplanıyor...</p>"; const secilenYontem = gerekliNotFormu.querySelector('input[name="hesaplamaYontemiGerekli"]:checked').value; const hedefHarfNotu = document.getElementById('target-grade').value; const sinifOrtalamasi = parseFloat(document.getElementById('req-class-avg').value); const sinifStandartSapma = parseFloat(document.getElementById('req-class-stddev').value); let araSinavKatkisi = 0; let gecerliGiris = true; if (secilenYontem === 'tek') { const araSinavOrtalamasiInput = document.getElementById('req-midterm-avg'); const araSinavOrtalamasi = parseFloat(araSinavOrtalamasiInput.value); araSinavOrtalamasiInput.required = true; if (isNaN(araSinavOrtalamasi) || araSinavOrtalamasi < 0 || araSinavOrtalamasi > 100) { hataGoster(gerekliNotSonucAlani, "Hata: Geçerli bir ara sınav ortalaması girin (0-100)."); gecerliGiris = false; } else { araSinavKatkisi = araSinavOrtalamasi * 0.50; } document.getElementById('vize-notu-gerekli').required = false; document.getElementById('vize-agirlik-gerekli').required = false; document.getElementById('odev-notu-gerekli').required = false; document.getElementById('odev-agirlik-gerekli').required = false; } else { document.getElementById('req-midterm-avg').required = false; const vizeNotuInput = document.getElementById('vize-notu-gerekli'); const vizeAgirlikInput = document.getElementById('vize-agirlik-gerekli'); const odevNotuInput = document.getElementById('odev-notu-gerekli'); const odevAgirlikInput = document.getElementById('odev-agirlik-gerekli'); vizeNotuInput.required = true; vizeAgirlikInput.required = true; odevNotuInput.required = true; odevAgirlikInput.required = true; const vizeNotu = parseFloat(vizeNotuInput.value); const vizeAgirlik = parseFloat(vizeAgirlikInput.value); const odevNotu = parseFloat(odevNotuInput.value); const odevAgirlik = parseFloat(odevAgirlikInput.value); if (isNaN(vizeNotu) || isNaN(vizeAgirlik) || isNaN(odevNotu) || isNaN(odevAgirlik) || vizeNotu < 0 || vizeNotu > 100 || odevNotu < 0 || odevNotu > 100 || vizeAgirlik < 0 || vizeAgirlik > 50 || odevAgirlik < 0 || odevAgirlik > 50) { hataGoster(gerekliNotSonucAlani, "Hata: Lütfen detaylı giriş alanlarını (notlar 0-100, ağırlıklar 0-50) doğru şekilde doldurun."); gecerliGiris = false; } else if (Math.abs(vizeAgirlik + odevAgirlik - 50) > 0.01) { hataGoster(gerekliNotSonucAlani, "Hata: Detaylı girişteki ağırlıkların toplamı 50 olmalıdır."); gecerliGiris = false; } else { araSinavKatkisi = (vizeNotu * vizeAgirlik / 100) + (odevNotu * odevAgirlik / 100); } } if (!hedefHarfNotu || isNaN(sinifOrtalamasi) || isNaN(sinifStandartSapma)) { hataGoster(gerekliNotSonucAlani, "Hata: Lütfen Hedef Not, Sınıf Ortalaması ve Standart Sapma alanlarını doğru şekilde doldurun."); gecerliGiris = false; } if (sinifOrtalamasi < 0 || sinifOrtalamasi > 100 || sinifStandartSapma < 0) { hataGoster(gerekliNotSonucAlani, "Hata: Sınıf Ortalaması 0-100, standart sapma 0 veya üzeri olmalıdır."); gecerliGiris = false; } if (sinifStandartSapma === 0) { hataGoster(gerekliNotSonucAlani, "Hata: Standart sapma 0 olamaz."); gecerliGiris = false; } if (!gecerliGiris) return; let gerekenFinalNotu = NaN; let anaMesaj = ""; let hesaplamaDetaylari = ""; const minimumTskor = getHedefNotIcinMinTskor(hedefHarfNotu, sinifOrtalamasi); if (minimumTskor === null) { hataGoster(gerekliNotSonucAlani, `Hata: Hedeflenen ${hedefHarfNotu} notu için geçerli bir minimum T-skor bulunamadı...`); return; } let hedefHamBasariNotuBagil = ((minimumTskor - 50) / 10) * sinifStandartSapma + sinifOrtalamasi; gerekenFinalNotu = 2 * (hedefHamBasariNotuBagil - araSinavKatkisi); const gerekenFinalNotuYuvarla = Math.round(gerekenFinalNotu * 100) / 100; hesaplamaDetaylari = `Hedeflenen <strong>${hedefHarfNotu}</strong> notu (Bağıl Değerlendirme) için;<br>`; hesaplamaDetaylari += `- Gerekli min. T-Skoru: ${minimumTskor.toFixed(2)} (Sınıf Ort: ${sinifOrtalamasi}, Std Sapma: ${sinifStandartSapma})<br>`; hesaplamaDetaylari += `- Başarmak için gereken minimum Ham Başarı Notu: <strong>${hedefHamBasariNotuBagil.toFixed(2)}</strong><br>`; const mutlakNotKarsiligi = getMutlakDegerlendirmeNotu(hedefHamBasariNotuBagil); hesaplamaDetaylari += `<small style='color:#555;'>(Bu Ham Başarı Notu Mutlak Değerlendirme Sisteminde ${mutlakNotKarsiligi} notuna karşılık gelir.)</small>`; let sonucMetni = ""; if (gerekenFinalNotu > 100) { anaMesaj = `Bu Ham Başarı Notuna ulaşmak için gereken final notu (${gerekenFinalNotuYuvarla}) <strong>100'den yüksek</strong>...`; sonucMetni = "İmkansız (>100)"; } else if (gerekenFinalNotu < MINIMUM_FINAL_NOTU_VARSAYILAN) { const gosterilecekFinal = Math.max(0, gerekenFinalNotuYuvarla).toFixed(2); anaMesaj = `Bu Ham Başarı Notuna ulaşmak için gereken final notu (${gosterilecekFinal}), minimum final notu (${MINIMUM_FINAL_NOTU_VARSAYILAN}) sınırının altında...`; sonucMetni = `En az ${MINIMUM_FINAL_NOTU_VARSAYILAN} (Hesaplanan: ${gerekenFinalNotuYuvarla})`; } else { anaMesaj = `Bu Ham Başarı Notuna ulaşmak için finalden <strong>en az ${gerekenFinalNotuYuvarla}</strong> almanız gerekmektedir.`; sonucMetni = gerekenFinalNotuYuvarla; } let sonucMesaji = `Gereken Final Notu: <strong style="font-size: 1.2em;">${sonucMetni}</strong><br><hr>`; sonucMesaji += `<p>${anaMesaj}</p>`; sonucMesaji += `<details style="margin-top: 10px; font-size: 0.9em; color: #555;"><summary>Hesaplama Detayları</summary><p style="margin-top: 5px;">${hesaplamaDetaylari}</p></details>`; gerekliNotSonucAlani.innerHTML = sonucMesaji; }); }

    // --- Senaryo Tablosu Formu İşleyicisi (GÜNCELLENDİ) ---
    if (senaryoFormu) {
        senaryoFormu.addEventListener('submit', (event) => {
            event.preventDefault();
            senaryoTabloAlani.innerHTML = "<p>Senaryolar Hesaplanıyor...</p>";

            const secilenYontem = senaryoFormu.querySelector('input[name="hesaplamaYontemiSenaryo"]:checked').value;
            const hedefHarfNotu = senaryoFormu.querySelector('input[name="scenarioTargetGrade"]:checked').value;
            let araSinavKatkisi = 0; let gecerliGiris = true;

            // Ara sınav katkısını hesapla
             if (secilenYontem === 'tek') { const araSinavOrtalamasiInput = document.getElementById('scenario-midterm-avg'); const araSinavOrtalamasi = parseFloat(araSinavOrtalamasiInput.value); araSinavOrtalamasiInput.required = true; if (isNaN(araSinavOrtalamasi) || araSinavOrtalamasi < 0 || araSinavOrtalamasi > 100) { hataGoster(senaryoTabloAlani, "Hata: Geçerli bir ara sınav ortalaması girin (0-100)."); gecerliGiris = false; } else { araSinavKatkisi = araSinavOrtalamasi * 0.50; } document.getElementById('vize-notu-senaryo').required = false; document.getElementById('vize-agirlik-senaryo').required = false; document.getElementById('odev-notu-senaryo').required = false; document.getElementById('odev-agirlik-senaryo').required = false; }
             else { document.getElementById('scenario-midterm-avg').required = false; const vizeNotuInput = document.getElementById('vize-notu-senaryo'); const vizeAgirlikInput = document.getElementById('vize-agirlik-senaryo'); const odevNotuInput = document.getElementById('odev-notu-senaryo'); const odevAgirlikInput = document.getElementById('odev-agirlik-senaryo'); vizeNotuInput.required = true; vizeAgirlikInput.required = true; odevNotuInput.required = true; odevAgirlikInput.required = true; const vizeNotu = parseFloat(vizeNotuInput.value); const vizeAgirlik = parseFloat(vizeAgirlikInput.value); const odevNotu = parseFloat(odevNotuInput.value); const odevAgirlik = parseFloat(odevAgirlikInput.value); if (isNaN(vizeNotu) || isNaN(vizeAgirlik) || isNaN(odevNotu) || isNaN(odevAgirlik) || vizeNotu < 0 || vizeNotu > 100 || odevNotu < 0 || odevNotu > 100 || vizeAgirlik < 0 || vizeAgirlik > 50 || odevAgirlik < 0 || odevAgirlik > 50) { hataGoster(senaryoTabloAlani, "Hata: Lütfen detaylı giriş alanlarını (notlar 0-100, ağırlıklar 0-50) doğru şekilde doldurun."); gecerliGiris = false; } else if (Math.abs(vizeAgirlik + odevAgirlik - 50) > 0.01) { hataGoster(senaryoTabloAlani, "Hata: Detaylı girişteki ağırlıkların toplamı 50 olmalıdır."); gecerliGiris = false; } else { araSinavKatkisi = (vizeNotu * vizeAgirlik / 100) + (odevNotu * odevAgirlik / 100); } }
             if (!gecerliGiris) return;

            // Senaryo Değerleri (Güncellendi)
            const senaryoOrtalamalar = [25, 30, 35, 40, 45, 50, 55]; // 25-55 aralığı
            const senaryoStdSapmalar = [8, 10, 12, 15, 18, 20, 22, 25]; // 8-25 aralığı

            // Tablo HTML'ini oluştur (Başlıklar Güncellendi)
            let tabloHTML = `<table>`;
            tabloHTML += `<caption>Farklı Sınıf Ortalaması ve Standart Sapma Değerlerine Göre Hedeflenen "${hedefHarfNotu}" Notu İçin Gereken Minimum Final Notları (Bağıl Sistem Hedefine Göre)</caption>`;
            // Başlık Satırı
            tabloHTML += `<thead><tr><th scope="col">↓ Std. Sapma \\ → Sınıf Ort.</th>`; // Açıklayıcı başlık
            senaryoOrtalamalar.forEach(ort => { tabloHTML += `<th scope="col">${ort}</th>`; }); // Sütun kapsamı
            tabloHTML += `</tr></thead><tbody>`;

            // Tablo içeriğini doldur
            senaryoStdSapmalar.forEach(stdSapma => {
                tabloHTML += `<tr><th scope="row">Std. Sapma: ${stdSapma}</th>`; // Satır başlığı ve kapsamı
                senaryoOrtalamalar.forEach(ortalama => {
                    let gerekenFinalNotu = "-"; let cellClass = "impossible";

                    // --- Sadece Bağıl Hedefe Göre Hesaplama ---
                    const minimumTskor = getHedefNotIcinMinTskor(hedefHarfNotu, ortalama);
                    if (minimumTskor !== null && stdSapma > 0) {
                         let hedefHamBasariNotuBagil = ((minimumTskor - 50) / 10) * stdSapma + ortalama;
                         // Mutlak karşılaştırma burada yapılmıyor!
                         let hedefHamBasariNotuNihai = hedefHamBasariNotuBagil; // Hedef sadece bağıldan geliyor
                         let hesaplananFinal = 2 * (hedefHamBasariNotuNihai - araSinavKatkisi);
                         let finalYuvarla = Math.round(hesaplananFinal * 100) / 100;

                         if (finalYuvarla > 100) { gerekenFinalNotu = "100+"; cellClass = "impossible"; }
                         else if (finalYuvarla < MINIMUM_FINAL_NOTU_VARSAYILAN) { gerekenFinalNotu = `Min ${MINIMUM_FINAL_NOTU_VARSAYILAN}`; cellClass = "min-final"; }
                         else { gerekenFinalNotu = finalYuvarla.toFixed(1); cellClass = ""; }
                    }
                    tabloHTML += `<td class="${cellClass}">${gerekenFinalNotu}</td>`;
                });
                tabloHTML += `</tr>`;
            });

            tabloHTML += `</tbody></table>`;
            senaryoTabloAlani.innerHTML = tabloHTML;
        });
    }

    // --- Sayfa Yüklenince Çalışacak İlk Ayarlar ---
    const firstTabButton = document.querySelector('.tab-button');
    if (firstTabButton) {
        openTab(null, firstTabButton.getAttribute('onclick').split("'")[1]);
        if(document.getElementsByClassName('tab-button').length > 0) {
           document.getElementsByClassName('tab-button')[0].classList.add('active');
        }
    }
    toggleInputFields('Harf');
    toggleInputFields('Gerekli');
    toggleInputFields('Senaryo');

}); // DOMContentLoaded Sonu